open, read, write, close
#include <sys/types.h>
#include<stdio.h>
#include <unistd.h>
#include <fcntl.h>
#define BUFSIZE 512
int main ()
{
int from, to, nr, nw, n;
char buf[BUFSIZE],ch;
if ((from=open("one.txt", O_RDONLY)) < 0) {
 printf("Error opening source file");
 exit(1);
 }
 
 if ((to=creat("two.txt", O_RDWR)) < 0) {
 printf("Error creating destination file");
 exit(2);
 } 
while((nr=read(from, buf, sizeof( buf))) != 0) {
 if (nr < 0) {
 printf("Error reading source file");
 exit(3);
 
 }
 nw=0;
 do {
 if ((n=write(to, &buf[nw], nr-nw)) < 0) {
 printf("Error writing destination file");
 exit(4);
 }
 nw += n;
 } while (nw < nr);
 }
printf("successfully copied the content from fiel one.txt to two.txt");
 close(from); close(to);
}
INPUT
Create file name one.txt with some content
OUTPUT
Successfully copied the content from file one.txt to two.txt
//you can see that program has created file two.txt and has content same as one.txt.
opendir, readdir
#include<stdio.h>
#include<dirent.h>
int main()
{
 struct dirent *de;
 DIR *dr=opendir(".");
 if(dr==NULL)
 {
 printf("Could not open current Directory");
 return 0;
 }
 while((de=readdir(dr))!=NULL)
 printf("%s\n",de->d_name);
 closedir(dr);
 return 1;
 }
OUTPUT
// will be list of all the directories; example output below:
ashrc
.bash_history
.bash_logout
.fcfs.c.swp
.landscape
.motd_shown
.msgqs.c.swp
.msgsend.c.swp
.pro.c.swp
.profile
.sc.c.swp
.sudo_as_admin_successful
.viminfo
a.c
a.out
dir
dir.c
file1
file1.c
file2
file2.c
hello.c
mqr.c
mqw.c
msgq.txt
msgrecv.c
stat
#include<stdio.h>
#include<sys/stat.h>
int main()
{
 struct stat sfile;
 stat("stat.c",&sfile);
 printf("st_mode=%o", sfile.st_mode);
 return 0;
}
OUTPUT
st_mode=100644
lseek
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <fcntl.h>
void func(char arr[], int n)
{
int f_write = open("start.txt", O_RDONLY);
int f_read = open("end.txt", O_WRONLY);
int count = 0;
while (read(f_write, arr, 1))
{
if (count < n)
{
lseek (f_write, n, SEEK_CUR);
write (f_read, arr, 1);
count = n;
}
else
{
count = (2*n);
lseek(f_write, count, SEEK_CUR);
write(f_read, arr, 1);
}
}
close(f_write);
close(f_read);
}
int main()
{
char arr[100];
int n;
n = 5;
func(arr, n);
return 0;
}
OUTPUT
//Create two file start.txt and end.txt write the content in one.txt.
You can see the sleek output in end.txt.
fcntl-creating a write lock
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
int main (int argc, char* argv[])
{
char* file = argv[1];
int fd;
struct flock lock;
printf ("opening %s\n", file);
fd = open (file, O_WRONLY);
printf ("locking\n");
memset (&lock, 0, sizeof(lock));
lock.l_type = F_WRLCK;
fcntl (fd, F_SETLKW, &lock);
printf ("locked; hit Enter to unlock... ");
getchar ();
printf ("unlocking\n");

lock.l_type = F_UNLCK;
fcntl (fd, F_SETLKW, &lock);
close (fd);
return 0;
}
OUTPUT
opening NULL
locking
locked; hit Enter to unlock...
